1：讲讲你对atomic & nonatomic的理解
原子性，非原子性，atomic的属性，系统生成的get/set方法里面会加上锁。
但是atomic不能完全保证线程安全，因为可以通过_访问实例变量，或者例如i++之类的操作。
2：被 weak 修饰的对象在被释放的时候会发生什么？是如何实现的？知道sideTable 么？里面的结构可以画出来么？
weak，弱引用的效果，不会retain对象，当对象被释放时，weak指针会被指向nil。
weak的妙用：weak单例，分类中的weak，使用block或者弱引用容器

3：block 用什么修饰？strong 可以？
copy, strong , arc可以, 函数内部的block在栈上，如果要在函数结束后调用，就要被copy到堆上，mrc时期要copy的，arc已经不用了
4：block 为什么能够捕获外界变量？ __block做了什么事？
clang重写的时候，block内部会把外部变量添加到自己的结构里面，__block可以让捕获行为从值的copy改成引用copy
5：谈谈你对事件的传递链和响应链的理解 （这个面试题，如果求职者能够回答一些实际开发相关的处理，不只是简单的概念，予以加分）
Hittest，pointinside，加大按钮，follrview
6：谈谈 KVC 以及 KVO 的理解？
kvc，键值编码模式，对象的实例变量可以通过key来访问，valueforkey
kvo，iOS中对观察者模式的实现，通过一个key，当属性发生变化时，通知被观察者。
kvo的崩溃和原理（通过runtime来动态添加子类，然后重写set）

7：RunLoop 的作用是什么？它的内部工作机制了解么？


8：苹果是如何实现 autoreleasepool的？
autoreleasepool 以一个队列数组的形式实现,主要通过下列三个函数完成.
objc_autoreleasepoolPush
objc_autoreleasepoolPop
objc_autorelease

看函数名就可以知道，对 autorelease 分别执行 push，和 pop 操作。销毁对象时执行release操作。
9：谈谈你对 FRP (函数响应式) 的理解，延伸一下 RxSwift 或者 RAC！
函数式，一个函数的结果只和入参有关，没有副作用，不引用全局变量，就是函数式，响应式，当一个量发生变化的时候，其他的值跟着变化
10：平时开发有没有玩过 Instrument？
发现内存泄漏，查看方法耗时，calltree
1：什么是 isa，isa 的作用是什么？

2：一个实例对象的isa 指向什么？类对象指向什么？元类isa 指向什么？

3：objc 中类方法和实例方法有什么本质区别和联系？

4：load 和 initialize 的区别？
load只会被调用一次，是类被加载到runtime环境时调用，分类也会有，是虚方法
initialize 是oc方法，会多次调用，他是类对象第一次被使用时，初始化调用的。。。。多继承的会多次调用，他走消息转发
5：_objc_msgForward 函数是做什么的？直接调用会发生什么问题？
方法没实现时，进行转发
6：简述下 Objective-C 中调用方法的过程

7：能否想向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？
编译后不行，运行时可以。
8：谈谈你对切面编程的理解
aop，处理无痕埋点时比较好用

1：tableView 有什么好的性能优化方案？
2：界面卡顿和检测你都是怎么处理？
3：谈谈你对离屏渲染的理解？
4：如何降低APP包的大小 消除重复的图片资源，检测未调用过的代码和类
5：日常如何检查内存泄露？
6：APP启动时间应从哪些方面优化？

1：HTTP的缺陷是什么？
不安全，明文传输没有https的加密
2：谈谈三次握手，四次挥手！为什么是三次握手，四次挥手？
需要三次握手才能确认双方的接收与发送能力是否正常，第一次，客户端给服务端发，然后服务端给客户端发，然后客户端回复服务端
client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段，但是server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求，于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了，由于client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据，但server却以为新的运输连接已经建立，并一直等待client发来数据。所以没有采用“三次握手”，这种情况下server的很多资源就白白浪费掉了。
四次挥手
为什么需要四次挥手呢？TCP是全双工模式，当client发出FIN报文段时，只是表示client已经没有数据要发送了，client告诉server，它的数据已经全部发送完毕了；但是，这个时候client还是可以接受来server的数据；当server返回ACK报文段时，表示它已经知道client没有数据发送了，但是server还是可以发送数据到client的；当server也发送了FIN报文段时，这个时候就表示server也没有数据要发送了，就会告诉client，我也没有数据要发送了，如果收到client确认报文段，之后彼此就会愉快的中断这次TCP连接。


3：socket 连接和 Http 连接的区别
socket是套接字，是对TCP/IP的封装。它对数据传输的两者提供了一个全双工的管道。
它和http一样，传输数据前要经历三次握手链接也要经历四次挥手断开链接。和http协议的区别在于，socket是一个长链接。http是短连接。socket虽然是长链接，但是由于网络等原因也有可能会断开链接。所以往往会提供一个心跳包，每隔一段时间向服务器发送一个规定好的心跳，如果某一个时间发送没有收到心跳，那代表已经断开链接了。
http是应用层的协议，它实现了怎么发数据和怎么收数据，定义了收发的格式，同时定义了是短连接。当一次传输数据结束就断开链接。

tcp和udp的区别
CP是面向连接(Connection oriented)的协议，UDP是无连接(Connection less)协议；TCP用三次握手建立连接：1) Client向server发送SYN；2) Server接收到SYN，回复Client一个SYN-ACK；3) Client接收到SYN_ACK，回复Server一个ACK。到此，连接建成。UDP发送数据前不需要建立连接。
TCP可靠，UDP不可靠；TCP丢包会自动重传，UDP不会。
TCP有序，UDP无序；消息在传输过程中可能会乱序，后发送的消息可能会先到达，TCP会对其进行重排序，UDP不会。
TCP无界，UDP有界；TCP通过字节流传输，UDP中每一个包都是单独的。
TCP有流量控制（拥塞控制），UDP没有；主要靠三次握手实现。
TCP传输慢，UDP传输快；因为TCP需要建立连接、保证可靠性和有序性，所以比较耗时。这就是为什么视频流、广播电视、在线多媒体游戏等选择使用UDP。
TCP是重量级的，UDP是轻量级的；TCP要建立连接、保证可靠性和有序性，就会传输更多的信息，如TCP的包头比较大。
TCP的头部比UDP大；TCP头部需要20字节，UDP头部只要8个字节


4：HTTPS，安全层除了SSL还有，最新的？ 参数握手时首先客户端要发什么额外参数
拿到服务器公共的密匙后，生成随机对称密钥，用服务器密钥加密
5：HTTPS是什么？握手过程，SSL原理，非对称加密了解多少
HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL（Secure Socket Layer）和TLS（Transport Layer Security）协议代替而已。

通常，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。简言之，所谓HTTPS，其实就是身披SSL协议这层外壳的HTTP。

在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。也就是说HTTP加上加密处理和认证以及完整性保护后即是HTTPS。

6：什么时候POP网路，有了 Alamofire 封装网络 URLSession为什么还要用Moya？

7：如何实现 dispatch_once
在加锁的情况下创建一个对象
8：能否写一个读写锁？谈谈具体的分析

9：什么时候会出现死锁？如何避免？

10：有哪几种锁？各自的原理？它们之间的区别是什么？最好可以结合使用场景来说

1.数据结构的存储一般常用的有几种？各有什么特点？
2.集合结构 线性结构 树形结构 图形结构
3.单向链表 双向链表 循环链表
4.数组和链表区别
5.堆、栈和队列
6.输入一棵二叉树的根结点，求该树的深度？
7.输入一课二叉树的根结点，判断该树是不是平衡二叉树

1.时间复杂度
2.空间复杂度
3.常用的排序算法
4.字符串反转
5.链表反转（头差法）
6.有序数组合并
7.查找第一个只出现一次的字符（Hash查找）
8.查找两个子视图的共同父视图
9.无序数组中的中位数(快排思想)
10.给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。

1：设计模式是为了解决什么问题的？
2：看过哪些第三方框架的源码，它们是怎么设计的？
3：可以说几个重构的技巧么？你觉得重构适合什么时候来做？
4：开发中常用架构设计模式你怎么选型?
5：你是如何组件化解耦的？

1：tableView 有什么好的性能优化方案？
2：界面卡顿和检测你都是怎么处理？
3：谈谈你对离屏渲染的理解？
4：如何降低APP包的大小
5：日常如何检查内存泄露？
6：APP启动时间应从哪些方面优化？
